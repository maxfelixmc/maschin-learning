package argus_ai;

import java.util.Random;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Collections;
import java.util.List;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.imageio.ImageIO;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;

public class defnet extends KEY {
	
	private double[][][] gewicht;
	private int[] perceptron;
	private Random rand = new Random();
	private double[][] AusgabeWerte;
	private double Fehler[][];
	private List<Integer> numbers;
	private int currentIndex;
	private double[][][] m;
	private double[][][] v;
	private double beta1 = 0.9;
	private double beta2 = 0.999;
	private double epsilon = 1e-8;
	private int t = 0;
	private String[] classes = {};
	
	public void init(String datei){
		gewicht = loadModel(datei);
	}
	
	public void init(int[] pperzeptron, int pfirst) 
	{
		perceptron = pperzeptron;
		
		int count = 0; 
		for(int n=0; n < perceptron.length; n++) {
			if(count < perceptron[n]) {
				count = perceptron[n];
			}
		}
		
		Fehler = new double[perceptron.length][]; 
		gewicht = new double[perceptron.length][][];
		
		for(int i=0; i<perceptron.length;i++) {
			if(i==0) {
				gewicht[0] = new double[perceptron[0]][];
				//System.out.println("====================================1");
				for(int n=0; n < perceptron[0]; n++) {
					for(int j=0; j < pfirst; j++) {
						double[] g = gewicht[0][n];
						gewicht[0][n] = add(g, getRandomDouble());
						//System.out.println(gewicht[0][n][j]);
					}
					//System.out.println("-------------------------------------");
				}
			}
			else {
				gewicht[i] = new double[perceptron[i]][];
				//System.out.println("===================================="+(i+1));
				for(int n=0; n < perceptron[i]; n++) {
					for(int j=0; j < perceptron[i-1]; j++) {
						double[] g = gewicht[i][n];
						gewicht[i][n] = add(g, getRandomDouble());
						//System.out.println(gewicht[i][n][j]);
					}
					//System.out.println("-------------------------------------");
				}
			}	
		}

		m = new double[gewicht.length][][];
		v = new double[gewicht.length][][];
		for (int layer = 0; layer < gewicht.length; layer++) {
			m[layer] = new double[gewicht[layer].length][];
			v[layer] = new double[gewicht[layer].length][];
			for (int p = 0; p < gewicht[layer].length; p++) {
				m[layer][p] = new double[gewicht[layer][p].length];
				v[layer][p] = new double[gewicht[layer][p].length];
			}
		}
	}
	
	public void backprop(double[][] labels, double[][] input, double learningRate, double genauikeit, int maxinterasions) throws Exception 
	{			
		Plotter plot = new Plotter("plot","time","accuracy");
		plot.setXRange(0, maxinterasions);
		plot.setYRange(0, 105);
		plot.displayLivePlot();
		double a=0;
		double y=0;
		int b = 0;
		UniqueRandomGenerator(0, input.length-1);
		while(a < genauikeit && maxinterasions > b) 
		{	
			for(int i=0;i<input.length;i++) 
			{	
				int u = getNextUniqueRandom();
				forwardPass(input[u],false,false);
				backprop_cel(labels[u],input[u],learningRate);
				y=berechneGenauigkeit(labels[u])+y;
			}
			a=y/input.length;
			plot.update(b, a);
			y=0;
			b++;
		}
		plot.savePlot("C:\\Users\\felix\\eclipse-workspace\\argus_ai\\plots", "plot.png", 900, 700);
		System.out.println("fertig hat " + b + " durchgaenge gebraucht fuer "+ a + "% genauikeit");	
	}
 	
	private void backprop_cel(double[] labels, double[] input, double learningRate) 
	{
	    int layerCount = perceptron.length;
	    t++;

	    Fehler[layerCount - 1] = new double[perceptron[layerCount - 1]];
	    for (int i = 0; i < perceptron[layerCount - 1]; i++) {
	        double diff = (AusgabeWerte[layerCount - 1][i] - labels[i]) * reluAbleitung(AusgabeWerte[layerCount - 1][i]);
	        Fehler[layerCount - 1][i] = diff;
	    }

	    for (int layer = layerCount - 2; layer >= 0; layer--) {
	        Fehler[layer] = new double[perceptron[layer]];

	        for (int n = 0; n < perceptron[layer]; n++) {
	            double sumError = 0.0;
	            for (int nn = 0; nn < perceptron[layer + 1]; nn++) {
	                sumError += Fehler[layer + 1][nn] * gewicht[layer + 1][nn][n];
	            }
	            sumError *= reluAbleitung(AusgabeWerte[layer][n]);
	            Fehler[layer][n] = sumError; 
	        }
	    }

	    for (int layer = 0; layer < layerCount; layer++) {
	        for (int p = 0; p < perceptron[layer]; p++) {
	            for (int w_ = 0; w_ < gewicht[layer][p].length; w_++) {
	                double eingabeWert = (layer == 0) ? input[w_] : AusgabeWerte[layer - 1][w_];
	                double grad = Fehler[layer][p] * eingabeWert;

	                m[layer][p][w_] = beta1 * m[layer][p][w_] + (1 - beta1) * grad;
	                v[layer][p][w_] = beta2 * v[layer][p][w_] + (1 - beta2) * (grad * grad);

	                double m_hat = m[layer][p][w_] / (1 - Math.pow(beta1, t));
	                double v_hat = v[layer][p][w_] / (1 - Math.pow(beta2, t));

	                gewicht[layer][p][w_] -= learningRate * (m_hat / (Math.sqrt(v_hat) + epsilon));
	            }
	        }
	    }
	}
	
	public void forwardPass(double[] input, boolean ausgabe, boolean enable_softmax) {
	    AusgabeWerte = new double[perceptron.length][];
	    
	    AusgabeWerte[0] = new double[perceptron[0]];
	    for (int p = 0; p < perceptron[0]; p++) {
	        double summe = 0.0;
	        for (int w = 0; w < gewicht[0][p].length; w++) {
	            double eingabeWert = input[w];
	            summe += eingabeWert * gewicht[0][p][w];
	        }
	        AusgabeWerte[0][p] = relu(summe);
	    }
	    
	    for (int layer = 1; layer < perceptron.length; layer++) {
	        AusgabeWerte[layer] = new double[perceptron[layer]];
	        for (int p = 0; p < perceptron[layer]; p++) {
	            double summe = 0.0;
	            for (int w = 0; w < gewicht[layer][p].length; w++) {
	                double eingabeWert = AusgabeWerte[layer - 1][w];
	                summe += eingabeWert * gewicht[layer][p][w];
	            }
	            if (layer == perceptron.length - 1 && enable_softmax) {
	                AusgabeWerte[layer][p] = summe;
	            } else {
	                AusgabeWerte[layer][p] = relu(summe);
	            }
	        }
	    }
	    
	    if (enable_softmax) {
	        AusgabeWerte[perceptron.length - 1] = softmax(AusgabeWerte[perceptron.length - 1]);
	    }
	    
	    if (ausgabe) {
	        System.out.println("Ausgaben des letzten Layers:");
	        for (int i = 0; i < AusgabeWerte[perceptron.length - 1].length; i++) {
	            System.out.println("Perzeptron " + i + ": " + AusgabeWerte[perceptron.length - 1][i]);
	        }
	    }
	}
	
	private double[] softmax(double[] inputArray) {
	    double max = Double.NEGATIVE_INFINITY;
	    for (double value : inputArray) {
	        if (value > max) max = value;
	    }
	    double sum = 0.0;
	    double[] expValues = new double[inputArray.length];
	    for (int i = 0; i < inputArray.length; i++) {
	        expValues[i] = Math.exp(inputArray[i] - max);
	        sum += expValues[i];
	    }
	    double[] softmaxOutput = new double[inputArray.length];
	    for (int i = 0; i < inputArray.length; i++) {
	        softmaxOutput[i] = expValues[i] / sum;
	    }
	    return softmaxOutput;
	}
	
	private double getRandomDouble() 
	{
        double value = rand.nextDouble(1); 
        return Math.round(value * 100.0) / 100.0; 
    }
	
	private double[] add(double arr[], double x) 
	{ 
	    int y = (arr == null) ? 0 : arr.length;
	    double newarr[] = new double[y + 1]; 
	    for (int i = 0; i < y; i++) 
	        newarr[i] = arr[i]; 
	    newarr[y] = x; 
	    return newarr; 
	}
	
	private double berechneGenauigkeit(double[] labels) 
	{
	    double[] letzteAusgabe = AusgabeWerte[perceptron.length - 1];
	    double sum = 0.0;
	    for (int i = 0; i < letzteAusgabe.length; i++) {
	        double diff = letzteAusgabe[i] - labels[i];
	        sum += diff * diff;
	    }
	    double meanSquaredError = sum / letzteAusgabe.length;
	    double genauigkeit = 100.0 / (1.0 + meanSquaredError);
	    return genauigkeit;
	}
	
	private void UniqueRandomGenerator(int min, int max) 
	{
        numbers = new ArrayList<>();
        for (int i = min; i <= max; i++) {
            numbers.add(i);
        }
        Collections.shuffle(numbers); 
        currentIndex = 0;
    }
	 
    private int getNextUniqueRandom() 
    {
        if (currentIndex >= numbers.size()) {
            Collections.shuffle(numbers);
            currentIndex = 0; 
        }
        return numbers.get(currentIndex++);
    }
    
    private double relu(double x) 
    {
	    return Math.max(0, x);
	}
    
	private double reluAbleitung(double x) 
	{
	    return x > 0 ? 1 : 0;
	}
	
	public void ausgabeTerminal(double[][] input)
	{		
		System.out.print("ausgabe-->");
		for (int i=0;i<input.length;i++)
		{
			forwardPass(input[i], false, false);
			System.out.print("[" + runden(AusgabeWerte[AusgabeWerte.length-1][0]) + "] ");
		}	
	}
	
	public double runden(double wert) 
	{
	    return Math.round(wert * 1000.0) / 1000.0;
	}
	
	public double[][] ausgabe(double[] input) 
	{
		forwardPass(input, false, false);
		return AusgabeWerte;
	}
	
	public void gewichtsausgabe()
	{	
		System.out.println();
		for(int i=0; i<gewicht.length;i++)
		{
			System.out.println("===================================="+(i+1));
			
			for(int e=0; e<gewicht[i].length;e++) 
			{
				for(int k=0;k<gewicht[i][e].length;k++) 
				{
					System.out.println(gewicht[i][e][k]);
				}
				
				System.out.println("-------------------------------------");
			}
			
		}
		
	}
	
	public double[] loadAndResizeImageAsGrayOneDim(String imagePath, int targetWidth, int targetHeight) throws IOException
		{

		    BufferedImage originalImg = ImageIO.read(new File(imagePath));

		    BufferedImage resizedImg = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_RGB);

		    Graphics2D g2d = resizedImg.createGraphics();
		    g2d.drawImage(
		        originalImg.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH),
		        0, 0, null
		    );
		    g2d.dispose();

		    double[] grayOneDim = new double[targetWidth * targetHeight];

		    int index = 0;
		    for (int y = 0; y < targetHeight; y++) {
		        for (int x = targetWidth - 1; x >= 0; x--) {

		            int rgb = resizedImg.getRGB(x, y);

		            int r = (rgb >> 16) & 0xFF;
		            int g = (rgb >> 8) & 0xFF;
		            int b = rgb & 0xFF;

		            double gray = 0.299 * r + 0.587 * g + 0.114 * b;
		            gray /= 255.0;
		            grayOneDim[index] = gray;
		            index++;
		        }
		    }

		    return grayOneDim;
		}
	
	public void backprop_picture(String[] input, double learningRate, double genauikeit, int maxinterasions, boolean liveplot, boolean name_switch , int targetWidth, int targetHeight) throws Exception 
	{			
		Plotter plot = new Plotter("plot","time","accuracy");
		plot.setXRange(0, maxinterasions);
		plot.setYRange(0, 105);
		if(liveplot) {
			plot.displayLivePlot();
		}
		double y=0;
		int b = 0;
		double a=0;
		int rt=0;
		double a_old=0;
		int k=0;
		UniqueRandomGenerator(0, input.length-1);
		while(a < genauikeit && maxinterasions > b && k < 5) 
		{	
			for(int i=0;i<input.length;i++) 
			{	
				int u = getNextUniqueRandom();
				
				String habicht = "";
				
				if (name_switch) {
					habicht = extractLabel(input[u]);
					
				}
				else {
					habicht = getImageNameWithoutExtension(input[u]);		
				}
						
				
				forwardPass(loadAndResizeImageAsGrayOneDim(input[u], targetWidth, targetHeight),false,true);
				backprop_cel(getLabelArray(habicht),loadAndResizeImageAsGrayOneDim(input[u], 50, 50),learningRate);
				y=berechneGenauigkeit(getLabelArray(habicht))+y;
			}
			a=y/input.length;
			
			if(a==a_old) {
				k++;
			}
			else {
				k=0;
			}
			
			a_old=a;
			
			plot.update(b, a);
			y=0;
			b++;
			rt++;
			if (rt>4) {
			System.out.print(".");
			rt=0;
			}
		}
		plot.savePlot("C:\\Users\\felix\\eclipse-workspace\\argus_ai\\plots", "plot.png", 900, 700);
		
		System.out.println("fertig hat " + b + " durchgaenge gebraucht fuer "+ a + "% genauikeit");	
	}
	
	public String getImageNameWithoutExtension(String imagePath) {
	    java.io.File file = new java.io.File(imagePath);    
	    String fullName = file.getName();
	    int lastDotIndex = fullName.lastIndexOf('.');
	    String baseName;
	    if (lastDotIndex > 0) {
	        baseName = fullName.substring(0, lastDotIndex);
	    } else {
	        baseName = fullName;
	    }
	    String result = baseName.replaceAll("\\d+$", "");
	    return result;
	}
	
	public double[] getLabelArray(String label) {
	    
	    int index = -1;
	    for (int i = 0; i < classes.length; i++) {
	        if (classes[i].equalsIgnoreCase(label)) {
	            index = i;
	            break;
	        }
	    }
	    if (index == -1) {
	        throw new IllegalArgumentException("Unbekannte Klasse: " + label);
	    }
	    double[] output = new double[classes.length];
	    output[index] = 1.0;    
	    return output;
	}
	
	public String[] getClasses() {
        return classes.clone();
    }
	
	public void LabelEncoder(String[] initialClasses) {
        this.classes = initialClasses.clone();
    }
	
	public void editClass(String oldLabel, String newLabel) {
        int index = -1;
        for (int i = 0; i < classes.length; i++) {
            if (classes[i].equals(oldLabel)) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            throw new IllegalArgumentException("Unbekannte Klasse: " + oldLabel);
        }
        classes[index] = newLabel;
    }
	
	public void addClass(String newLabel) {
        for (String cls : classes) {
            if (cls.equals(newLabel)) {
                throw new IllegalArgumentException("Klasse existiert bereits: " + newLabel);
            }
        }
        String[] newClasses = new String[classes.length + 1];
        for (int i = 0; i < classes.length; i++) {
            newClasses[i] = classes[i];
        }
        int newLabelIndex = classes.length;
        newClasses[newLabelIndex] = newLabel;
        classes = newClasses;
    }
	
	public void removeClass(String label) {
        int index = -1;
        for (int i = 0; i < classes.length; i++) {
            if (classes[i].equals(label)) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            throw new IllegalArgumentException("Klasse existiert nicht: " + label);
        }
        String[] newClasses = new String[classes.length - 1];
        int newIndex = 0;
        for (int i = 0; i < classes.length; i++) {
            if (i == index) {
                continue;
            }
            newClasses[newIndex] = classes[i];
            newIndex++;
        }
        classes = newClasses;
    }
	
	public static String[] getFilePaths(String folderPath) {
        File folder = new File(folderPath);

        File[] files = folder.listFiles();

        List<String> filePaths = new ArrayList<>();

        if (files != null) {
            for (File file : files) {
                if (file.isFile()) {
                    filePaths.add(file.getAbsolutePath());
                }
            }
        }
        String[] result = filePaths.toArray(new String[0]);
        return result;
    }
	
	public double[] classifyImage(String imagePath, int targetWidth, int targetHeight, boolean text) throws IOException {
	    double[] input = loadAndResizeImageAsGrayOneDim(imagePath, targetWidth, targetHeight);
	    
	    forwardPass(input, false, true);
	    
	    double[] probabilities = AusgabeWerte[perceptron.length - 1];
	    
	    if(text) {
		    String[] labels = getClasses();
		    
		    System.out.println("Bild: " + imagePath);
		    System.out.println("Klassifikationsergebnisse:");
		    for (int i = 0; i < probabilities.length; i++) {
		        System.out.println(labels[i] + ": " + probabilities[i]);
		    }
	    }
	    return probabilities;
	}
	
	public void printBinaryArrayAsChars(double[] arr, int elementsPerLine) {
	    for (int i = 0; i < arr.length; i++) {
	        if (Math.abs(arr[i]) < 1e-9) {
	            System.out.print("  ");
	        }
	        else if (Math.abs(arr[i] - 1.0) < 1e-9) {
	            System.out.print("##");
	        }
	        else {
	            System.out.print("##");
	        }
	        
	        if ((i + 1) % elementsPerLine == 0) {
	            System.out.println();
	        }
	    }
	    if (arr.length % elementsPerLine != 0) {
	        System.out.println();
	    }
	}
	
	public void identifiziereJaNein(double[] ausgabe) {
	    
		System.out.println("=========================");
		
		for(int i=0;i<classes.length;i++) {

			if (ausgabe[i]>0.5) {
				System.out.println(classes[i]+": ja");
			}
			else {
				System.out.println(classes[i]+": nein");
			}
			
		}
		
	}
	
	public void saveModel(boolean enable, String name) {
		
		String filePath = "modele" + File.separator + name + ".mmd";
		
		VerzeichnisErstellen(new File(filePath).getParent());
	
		double[][][] array = gewicht;
		
        try (PrintWriter writer = new PrintWriter(filePath)) {
            int depth = array.length;
            int rows = array[0].length;
            
            if(enable) {
            	writer.println(String.valueOf("+"));
            }
            else {
            	writer.println(String.valueOf("-"));
            }
            
            writer.println(encrypt(String.valueOf(arrayToString(classes)), secretKey, enable));
            
            writer.println(encrypt(String.valueOf(depth), secretKey, enable));


            for (int i = 0; i < depth; i++) {
            	rows = array[i].length;
            	writer.println(encrypt(String.valueOf(array[i].length), secretKey, enable));
                
            }
            writer.println(encrypt(String.valueOf("/"), secretKey, enable));
            
            for (int i = 0; i < depth; i++) {
            	rows = array[i].length;
                for (int j = 0; j < rows; j++) {
                    for (int k = 0; k < array[i][j].length; k++) {
                        writer.print(encrypt(String.valueOf(array[i][j][k] + " "), secretKey, enable));
                    }
                    writer.println();
                }
            }
            System.out.println("");            
            System.out.println("Das Model wurde gespeichert");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    
	
}
	
	private void VerzeichnisErstellen(String directoryPath) {
        File directory = new File(directoryPath);
        if (!directory.exists()) {
            if (directory.mkdirs()) {
                System.out.println("\nVerzeichnis erstellt: " + directoryPath);
            } else {
                System.out.println("\nFehler beim Erstellen des Verzeichnisses: " + directoryPath);
                System.exit(1);
            }
        }
    }
	
	public double[][][] loadModel(String datei) {
			
			String filePath = "modele" + File.separator + datei +".mmd";
			BufferedReader reader;
			try {
				reader = new BufferedReader(new FileReader(filePath));
			
			boolean d = reader.readLine().equals("+") ;
			
			classes = parseStringToArray(decrypt(reader.readLine(), secretKey, d));
			
			int c = Integer.parseInt(decrypt(reader.readLine(), secretKey, d));
			
			//System.out.println(c);
			
			double[][][] data = new double[c][][];
			
			for (int i=0; i<c;i++) {
				String z = reader.readLine();
				data[i] = new double[Integer.parseInt(decrypt(z, secretKey, d))][];
				//System.out.println(Integer.parseInt(decrypt(z, secretKey, d)));
			}
			
			perceptron = new int[data.length];
			
			for (int w=0; w<data.length; w++) {
				perceptron[w] = data[w].length;
			}
			
			boolean t = decrypt(reader.readLine(), secretKey, d).equals("/") ;
			if (t == false) {
				
				System.out.println("Error");
			}
			else {
				//System.out.println("ok");
				for (int i=0; i<c;i++) {
					for (int g=0; g<data[i].length;g++) {
						String[] values = decrypt(reader.readLine(), secretKey, d).split(" ");
						for (int u=0; u<values.length;u++) {
							double[] g1 = data[i][g];
							//System.out.print(values[u]+ " ");
							data[i][g] = add(g1, Double.parseDouble(values[u]));
						}
						//System.out.println("");
					}
				}
			}
			
			reader.close();
			
			return data;
			
			} catch (Exception e) {
				e.printStackTrace();
			}
			
			return null;
	    }
	
	private String encrypt(String input, String key, boolean enable) {
		if (enable) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            SecretKey secretKey = new SecretKeySpec(key.getBytes(), "AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedBytes = cipher.doFinal(input.getBytes());
            return Base64.getEncoder().encodeToString(encryptedBytes);
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException |
                BadPaddingException | IllegalBlockSizeException e) {
            e.printStackTrace();
        }
        return null;
		}
		else {
			return input;
		}
    }
	
	private String decrypt(String input, String key, boolean enable) {
		if (enable) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            SecretKey secretKey = new SecretKeySpec(key.getBytes(), "AES");
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            String[] parts = input.split("=");
            StringBuilder decryptedText = new StringBuilder();
            for (String part : parts) {
                byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(part));
                decryptedText.append(new String(decryptedBytes));
            }

            return decryptedText.toString();
        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException |
                BadPaddingException | IllegalBlockSizeException e) {
            e.printStackTrace();
        }
        return null;
		}
		else {
			return input;
		}
    }
	
	public static String[] parseStringToArray(String input) {
        String trimmed = input.substring(1, input.length() - 1);
        
        String[] parts = trimmed.split(",");
        
        for (int i = 0; i < parts.length; i++) {
            parts[i] = parts[i].trim();
        }
        return parts;
    }
	
	public static String arrayToString(String[] array) {
		return "[" + String.join(",", array) + "]";
	}
	
	public static boolean isFilePresent(String folderPath, String fileName) {
        File file = new File(folderPath, fileName);
        
        return file.exists() && file.isFile();
    }
	
	public String extractLabel(String filename) {
        int startIndex = filename.indexOf("digit_") + "digit_".length();

        int endIndex = filename.indexOf("_", startIndex);

        String labelStr = filename.substring(startIndex, endIndex);

        String label = labelStr;

        return label;
    }
	
}
