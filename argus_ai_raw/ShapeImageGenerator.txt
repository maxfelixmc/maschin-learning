package argus_ai;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Random;
import javax.imageio.ImageIO;

public class ShapeImageGenerator {

    /**
     * Erzeugt eine bestimmte Anzahl von Bildern mit vorgegebenen Abmessungen, 
     * auf denen eine zufällig positionierte und skalierte Form (Kreis, Dreieck oder Quadrat) 
     * gezeichnet wird. Die Form ist weiß auf einem schwarzen Hintergrund.
     *
     * @param numImages int - Anzahl der zu erzeugenden Bilder.
     * @param width int - Breite der Bilder.
     * @param height int - Höhe der Bilder.
     * @param folder String - Zielordner, in dem die Bilder gespeichert werden.
     * @param shapeType String - Typ der Form ("kreis", "dreieck" oder "quadrat").
     * @throws IOException - Falls beim Schreiben der PNG-Dateien ein Fehler auftritt.
     */
    public void generateShapeImages(int numImages, int width, int height, String folder, String shapeType) throws IOException {
        File dir = new File(folder);
        if (!dir.exists()) {
            dir.mkdirs();
        }
        
        Random rand = new Random();
        
        for (int i = 1; i <= numImages; i++) {
            BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = image.createGraphics();
            g2d.setColor(Color.BLACK);
            g2d.fillRect(0, 0, width, height);
            
            g2d.setColor(Color.WHITE);
            
            switch(shapeType.toLowerCase()){
                case "kreis":
                    int maxRadius = Math.min(width, height) / 4;
                    int radius = 10 + rand.nextInt(Math.max(1, maxRadius - 10 + 1));
                    int x = rand.nextInt(width - 2 * radius);
                    int y = rand.nextInt(height - 2 * radius);
                    g2d.fillOval(x, y, 2 * radius, 2 * radius);
                    break;
                    
                case "dreieck":
                    int x1 = rand.nextInt(width);
                    int y1 = rand.nextInt(height);
                    int x2 = rand.nextInt(width);
                    int y2 = rand.nextInt(height);
                    int x3 = rand.nextInt(width);
                    int y3 = rand.nextInt(height);
                    Polygon triangle = new Polygon(new int[]{x1, x2, x3}, new int[]{y1, y2, y3}, 3);
                    g2d.fillPolygon(triangle);
                    break;
                    
                case "quadrat":
                    int maxSide = Math.min(width, height) / 4;
                    int side = 10 + rand.nextInt(Math.max(1, maxSide - 10 + 1));
                    int sx = rand.nextInt(width - side);
                    int sy = rand.nextInt(height - side);
                    g2d.fillRect(sx, sy, side, side);
                    break;
                    
                default:
                    g2d.dispose();
                    throw new IllegalArgumentException("Unbekannter Shape-Typ: " + shapeType);
            }
            
            g2d.dispose();
            
            String fileName = folder + File.separator + shapeType.toLowerCase() + i + ".png";
            File outputfile = new File(fileName);
            ImageIO.write(image, "png", outputfile);
        }
    }
}
